{"version":3,"sources":["components/home/Home.js","components/faq/Question.js","components/faq/FAQ.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Question","faq","index","onToggleQ","open","question","onClick","answer","FAQ","useState","faqs","setfaqs","toggleQuestion","map","i","Fragment","key","App2","routes","path","exact","name","component","App","route","to","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAsBeA,G,YAnBF,WACT,OACI,yBAAKC,UAAU,kBACX,oCACA,yBAAKA,UAAU,kBACX,4BACI,4BACI,wCACA,yBAAKA,UAAU,mBACX,2DACA,6D,QCMbC,EAjBE,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAI3B,OACI,yBAAKJ,UAAW,QAAUE,EAAIG,KAAO,OAAS,KAC1C,yBAAKL,UAAU,gBACVE,EAAII,SACL,0BAAMC,QAPI,WAClBH,EAAUD,KAMF,WAEJ,yBAAKH,UAAU,cACVE,EAAIM,UCuDNC,G,MA/DH,WAAO,IAAD,EACUC,mBAAS,CAC7B,CACEJ,SAAU,6DACVE,OAAQ,sDACRH,MAAM,GAER,CACEC,SAAU,kCACVE,OAAQ,oBACRH,MAAM,GAER,CACEC,SAAS,iEACTE,OAAQ,iCACRH,MAAM,GAER,CACIC,SAAU,uBACVE,OAAQ,2DACRH,MAAM,GAEV,CACIC,SAAU,uBACVE,OAAQ,4EACRH,MAAM,GAEV,CACIC,SAAU,kBACVE,OAAQ,mFACRH,MAAM,KA9BA,mBACPM,EADO,KACDC,EADC,KAkCRC,EAAiB,SAAAV,GACnBS,EACID,EAAKG,KAAI,SAACZ,EAAKa,GAMX,OAJIb,EAAIG,KADLU,IAAMZ,IACOD,EAAIG,KAIbH,OAKnB,OACI,yBAAKF,UAAU,sBACX,2DACA,yBAAKA,UAAU,QAEPW,EAAKG,KAAI,SAACZ,EAAKC,GAAN,OACL,kBAAC,IAAMa,SAAP,CAAgBC,IAAKd,GACjB,kBAAC,EAAD,CAAUD,IAAKA,EAAKC,MAAOA,EAAOC,UAAWS,YCpDnEK,EAAO,WACX,OAAO,qCAGHC,EAAS,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,KAAM,OACNC,UAAW,kBAAC,EAAD,OAEb,CACEH,KAAM,aACNE,KAAM,WACNC,UAAW,kBAAC,EAAD,OAEb,CACEH,KAAM,QACNE,KAAM,QACNC,UAAW,kBAAC,EAAD,QAmCAC,MA/Bf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,mBACX,6BAASA,UAAU,WACjB,4BAEImB,EAAOL,KAAI,SAACW,EAAOtB,GAAR,OACT,wBAAIc,IAAKd,GACP,kBAAC,IAAD,CAAMuB,GAAID,EAAML,MAAOK,EAAMH,YAMvC,6BAAStB,UAAU,WACjB,kBAAC,IAAD,KAEMmB,EAAOL,KAAI,SAACW,EAAOtB,GAAR,OACT,kBAAC,IAAD,CAAOkB,MAAOI,EAAMJ,MAAOJ,IAAKd,EAAOiB,KAAMK,EAAML,KAAMO,SAAUF,EAAMF,qBCtCzEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfef065f.chunk.js","sourcesContent":["import React from 'react';\nimport './home-styles.css'\n\nconst Home = () => {\n    return (\n        <div className='home-container'>\n            <h1>Home</h1>\n            <div className='apps-container'>\n                <ul>\n                    <li>\n                        <h2>FAQ page</h2>\n                        <div className='app-description'>\n                            <p>Using the accordion approach</p>\n                            <p>The questions are local</p>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Question = ({faq, index, onToggleQ}) => {\n    const toggleQHelper = () => {\n        onToggleQ(index)\n    }\n    return (\n        <div className={'faq ' + (faq.open ? 'open' : '')}>\n            <div className='faq-question'>\n                {faq.question}\n                <span onClick={toggleQHelper}>&#8595;</span>\n            </div>\n            <div className='faq-answer'>\n                {faq.answer}\n            </div>\n        </div>\n    )\n}\n\nexport default Question;","import React, { useState } from 'react';\n\nimport Question from './Question.js';\nimport './faq-styles.css';\n\nconst FAQ = () => {\n    const [faqs, setfaqs] = useState([\n        {\n          question: \"how many programmers does it take to screw in a ligthbulb?\",\n          answer: \"None, we don't adress hardware issues. ðŸ¤ª\",\n          open: true\n        },\n        {\n          question: \"Who is the most awesome person?\",\n          answer: \"You, ðŸ™ƒ\",\n          open: false\n        },\n        {\n          question:\"How many questions does it take to make a successful FAQ page?\",\n          answer: \"Thiiiiiiiis many. ðŸ“ˆ\",\n          open: false\n        },\n        {\n            question: 'What\\'s a Programmer?',\n            answer: \"An organism that turns caffeine and pizza into software.\",\n            open: false\n        },\n        {\n            question: 'What\\'s an Algorithm?',\n            answer: \"Word used by a programmer when they do not want to explain what they did.\",\n            open: false\n        },\n        {\n            question: 'QA vs Developer',\n            answer: \"Two people from different planets working together to deliver a quality product.\",\n            open: false\n        }\n      ]);\n\n    const toggleQuestion = index => {\n        setfaqs(\n            faqs.map((faq, i) => {\n                if(i === index){\n                    faq.open = !faq.open\n                }else{\n                    faq.open = false\n                }\n                return faq;\n            })\n        )\n    }\n\n    return (\n        <div className='faq-page-container'>\n            <header>the best faq page ever!</header>\n            <div className='faqs'>\n                {\n                    faqs.map((faq, index) => (\n                        <React.Fragment key={index}>\n                            <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n                        </React.Fragment>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default FAQ;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\nimport Home from './components/home/Home';\nimport FAQ from './components/faq/FAQ';\n\nconst App2 = () =>{\n  return <h2>App2</h2>\n}\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    name: \"Home\",\n    component: <Home/>\n  },\n  {\n    path: \"/accordion\",\n    name: \"FAQ page\",\n    component: <FAQ/>\n  },\n  {\n    path: \"/app2\",\n    name: \"App 2\",\n    component: <App2/>\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <div className='inner-container'>\n          <section className=\"sidebar\">\n            <ul>\n              {\n                routes.map((route, index) => (\n                  <li key={index}>\n                    <Link to={route.path}>{route.name}</Link>\n                  </li>\n                ))\n              }\n            </ul>\n          </section>\n          <section className='content'>\n            <Switch>\n                {\n                  routes.map((route, index) => (\n                    <Route exact={route.exact} key={index} path={route.path} children={route.component}/>\n                  ))\n                }\n              </Switch>\n          </section>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}