{"version":3,"sources":["components/home/Home.js","components/faq/Question.js","components/faq/FAQ.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Question","faq","index","onToggleQ","open","question","onClick","answer","questions","tag","FAQ","useState","faqs","setFaqs","wantedQ","setWantedQ","filteredQs","setFilteredQs","useEffect","toggleQuestion","map","i","filter","toLocaleLowerCase","includes","name","type","value","autoComplete","placeholder","onChange","e","target","autoFocus","length","Fragment","key","App2","routes","path","exact","component","App","route","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb00a3a4.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './home-styles.css'\n\nconst Home = () => {\n    return (\n        <div className='home-container'>\n            <h1>My Apps collection</h1>\n            <div className='apps-container'>\n\n                <div className='app'>\n                    <Link to='/accordion'>\n                        <h2>FAQ page</h2>\n                    </Link>\n                    <ul>\n                        <li>Using the accordion approach</li>\n                        <li>The questions are local</li>\n                    </ul>\n                </div>\n\n                <div className='app'>\n                    <h2>APP 2</h2>\n                    <ul>\n                        <li>Lorem impsum hety yur sec</li>\n                        <li>abc defg hijk lmnops</li>\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Question = ({faq, index, onToggleQ}) => {\n    const toggleQHelper = () => {\n        onToggleQ(index)\n    }\n    return (\n        <div className={'faq ' + (faq.open ? 'open' : '')}>\n            <div className='faq-question'>\n                {faq.question}\n                <span onClick={toggleQHelper}>&#8595;</span>\n            </div>\n            <div className='faq-answer'>\n                {faq.answer}\n            </div>\n        </div>\n    )\n}\n\nexport default Question;","import React, { useState, useEffect } from 'react';\n\nimport Question from './Question.js';\nimport './faq-styles.css';\n\nconst questions = [\n    {\n        question: \"how many programmers does it take to screw in a ligthbulb?\",\n        answer: \"None, we don't adress hardware issues. ðŸ¤ª\",\n        tag: 'funny',\n        open: true\n    },\n    {\n        question: \"Who is the most awesome person?\",\n        answer: \"You, ðŸ™ƒ\",\n        open: false\n    },\n    {\n        question:\"How many questions does it take to make a successful FAQ page?\",\n        answer: \"Thiiiiiiiis many. ðŸ“ˆ\",\n        open: false\n    },\n    {\n        question: 'What\\'s a Programmer?',\n        answer: \"An organism that turns caffeine and pizza into software.\",\n        open: false\n    },\n    {\n        question: 'What\\'s an Algorithm?',\n        answer: \"Word used by a programmer when they do not want to explain what they did.\",\n        open: false\n    },\n    {\n        question: 'QA vs Developer',\n        answer: \"Two people from different planets working together to deliver a quality product.\",\n        open: false\n    },\n    {\n        question: 'What is the difference between an element and a component in React?',\n        answer: \"An element is a plain JavaScript object that represents a DOM node or component. Components can be either classes or functions, that take props as an input and return an element tree as the output.\",\n        open: false\n    }\n]\n\nconst FAQ = () => {\n    /*1st approach\n        const [ faqs, setFaqs] = useState(questions);\n    */\n    const [ faqs, setFaqs] = useState([]);\n    const [ wantedQ, setWantedQ ] = useState('');\n    const [ filteredQs, setFilteredQs ] = useState([])\n\n    useEffect(() => {\n        setFaqs(questions)\n    }, [faqs])\n\n    const toggleQuestion = index => {\n        setFaqs(\n            faqs.map((faq, i) => {\n                if(i === index){\n                    faq.open = !faq.open\n                }else{\n                    faq.open = false\n                }\n                return faq;\n            })\n        )\n    }\n\n    const findQuestionHandler = (e) => {\n        /*1st approach\n        const qsFound = questions.filter(faq => faq.question.toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase()))\n        setFaqs(qsFound)*/\n        setWantedQ(e.target.value)\n    }\n    /* 2nd approach\n        const filteredQuestions = faqs.filter(faq =>faq.question.toLocaleLowerCase().includes(wantedQ.toLocaleLowerCase()))\n    */\n\n    //3rd approach\n    useEffect(() => {\n        setFilteredQs(\n            faqs.filter(faq => faq.question.toLocaleLowerCase().includes(wantedQ.toLocaleLowerCase()))\n        )\n    }, [wantedQ, faqs])\n\n    return (\n        <div className='faq-page-container'>\n            <header>the best faq page ever!</header>\n            <div className='search-question-container'>\n                <input\n                    name='search'\n                    type='text'\n                    value={wantedQ}\n                    autoComplete = 'off'\n                    placeholder='Search question'\n                    onChange={findQuestionHandler}\n                    autoFocus={true}\n                />\n            </div>\n            <div className='faqs'>\n                \n                {/* 1st approach\n                    {  faqs.length === 0 \n                    ? <span className='no-matches'>no questions found.. ðŸ˜­</span> \n                    : faqs.map((faq, index) => (\n                        <React.Fragment key={index}>\n                            <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n                        </React.Fragment>\n                     ))\n                } */}\n                {/*2nd approach\n                    filteredQuestions.map((faq, index) => (\n                        <React.Fragment key={index}>\n                            <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n                        </React.Fragment>\n                    ))\n                */}\n                {\n                    /*3rd approach using a second useEffect()*/\n                    filteredQs.length === 0 \n                    ? <span className='no-matches'>no questions found.. ðŸ˜­</span> \n                    : filteredQs.map((faq, index) => (\n                        <React.Fragment key={index}>\n                            <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n                        </React.Fragment>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default FAQ;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\nimport Home from './components/home/Home';\nimport FAQ from './components/faq/FAQ';\n\nconst App2 = () =>{\n  return <h2>App2</h2>\n}\n\nconst routes = [\n  {\n    path: \"/home\",\n    exact: true,\n    name: \"Home\",\n    component: <Home/>\n  },\n  {\n    path: \"/accordion\",\n    name: \"FAQ page\",\n    component: <FAQ/>\n  },\n  {\n    path: \"/app2\",\n    name: \"App 2\",\n    component: <App2/>\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className='inner-container'>\n          <section className=\"sidebar\">\n            <h1>My Apps ðŸ’ª</h1>\n            <ul>\n              {\n                routes.map((route, index) => (\n                  <li key={index}>\n                    <Link to={route.path}>{route.name}</Link>\n                  </li>\n                ))\n              }\n            </ul>\n          </section>\n          <section className='content'>\n            <Switch>\n                {\n                  routes.map((route, index) => (\n                    <Route exact={route.exact} key={index} path={route.path} children={route.component}/>\n                  ))\n                }\n              </Switch>\n          </section>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}