{"version":3,"sources":["components/home/Home.js","components/faq/Question.js","components/faq/Tags.js","components/faq/FAQ.js","components/basicTodo/List.js","components/basicTodo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Question","faq","onToggleQ","open","question","onClick","id","answer","Tags","list","removeQ","map","tag","i","key","questions","uuid","tags","FAQ","useState","faqs","setFaqs","wantedQ","setWantedQ","useEffect","length","toggleQuestion","filteredQs","filter","toLowerCase","includes","tagsList","Set","flat","name","type","value","autoComplete","placeholder","onChange","e","target","autoFocus","index","Fragment","List","props","items","item","completed","task","markAsCompleted","removeTask","tasks","Todo","setItems","setTask","onSubmit","preventDefault","concat","filteredTasks","routes","path","exact","component","App","route","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9625350e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './home-styles.css'\n\nconst Home = () => {\n    return (\n        <div className='home-container'>\n            <h1>My Apps collection</h1>\n            <div className='apps-container'>\n\n                <div className='app'>\n                    <Link to='/accordion'>\n                        <h2>FAQ page</h2>\n                    </Link>\n                    <ul>\n                        <li>Using the accordion approach</li>\n                        <li>The questions are local</li>\n                    </ul>\n                </div>\n\n                <div className='app'>\n                    <Link to='/basic-todo'>\n                        <h2>Basic Todo</h2>\n                    </Link>\n                    <ul>\n                        <li>Functional Components</li>\n                        <li>Add, Remove and Mark a TASK as completed </li>\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Question = ({faq, onToggleQ}) => {\n    return (\n        <div className={'faq ' + (faq.open ? 'open' : '')}>\n            <div className='faq-question'>\n                {faq.question}\n                {/* <p>{faq.question} {faq.tags.map((tag, index) => <i key={index}>{tag}</i> )}</p> */}\n                <span onClick={() => onToggleQ(faq.id)}>&#8595;</span>\n            </div>\n            <div className='faq-answer'>\n                {faq.answer}\n            </div>\n        </div>\n    )\n}\n\nexport default Question;","import React from 'react';\n\nconst Tags = ({list, removeQ}) => {\n\n    return(\n        <div className='tags-container'>\n            {\n                list.map((tag, i) => (\n                    <p key={i} className='tag'>{tag}<span className='close-tag' onClick={() => removeQ(tag)}>X</span></p>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Tags;","import React, { useState, useEffect } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport Question from './Question.js';\nimport './faq-styles.css';\nimport Tags from './Tags.js';\n\nconst questions = [\n    {   \n        id: uuid(),\n        question: \"how many programmers does it take to screw in a ligthbulb?\",\n        answer: \"None, we don't adress hardware issues. ðŸ¤ª\",\n        tags: ['funny'],\n        open: true\n    },\n    {\n        id: uuid(),\n        question: \"Who is the most awesome person?\",\n        answer: \"You, ðŸ™ƒ\",\n        tags: ['funny'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question:\"How many questions does it take to make a successful FAQ page?\",\n        answer: \"Thiiiiiiiis many. ðŸ“ˆ\",\n        tags: ['funny'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question: 'What\\'s a Programmer?',\n        answer: \"An organism that turns caffeine and pizza into software.\",\n        tags: ['funny'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question: 'What\\'s an Algorithm?',\n        answer: \"Word used by a programmer when they do not want to explain what they did.\",\n        tags: ['funny'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question: 'QA vs Developer',\n        answer: \"Two people from different planets working together to deliver a quality product.\",\n        tags: ['developer'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question: 'What is the difference between an element and a component in React?',\n        answer: \"An element is a plain JavaScript object that represents a DOM node or component. Components can be either classes or functions, that take props as an input and return an element tree as the output.\",\n        tags: ['react'],\n        open: false\n    },\n    {\n        id: uuid(),\n        question: 'In which states can a Promise be?',\n        answer: \"pending, fulfilled, rejected\",\n        tags: ['js'],\n        open: false   \n    },\n    {\n        id: uuid(),\n        question: 'What is the purpose of the alt attribute on images?',\n        answer: \"Web crawlers use alt tags to understand image content, so they are considered important for Search Engine Optimization (SEO).\",\n        tags: ['html'],\n        open: false   \n    },\n    {\n        id: uuid(),\n        question: 'What is the difference between HTML and React event handling?',\n        answer: \"HTML uses lowercase, React uses camelCase.\",\n        tags: ['html'],\n        open: false   \n    },\n    {\n        id: uuid(),\n        question: 'Can you name the four types of @media properties?',\n        answer: \"All, Print, Screen, Speech\",\n        tags: ['css'],\n        open: false   \n    },\n    {\n        id: uuid(),\n        question: 'What is the difference between em and rem units?',\n        answer: 'em units inherit their value from the font-size of the parent element; rem units inherit their value from the font-size of the root element (html)',\n        tags: ['css'],\n        open: false   \n    }\n]\n\n// const FAQ = () => {\n//     /*1st approach\n//         const [ faqs, setFaqs] = useState(questions);\n//     */\n//     const [ faqs, setFaqs] = useState([]);\n//     const [ wantedQ, setWantedQ ] = useState('');\n//     const [ filteredQs, setFilteredQs ] = useState([])\n\n//     useEffect(() => { \n//         setFaqs(questions)\n//     }, [wantedQ])\n\n//     const toggleQuestion = index => {\n//         setFaqs(\n//             filteredQs.map((faq, i) => {\n//                 if(i === index){\n//                     faq.open = !faq.open\n//                 }else{\n//                     faq.open = false\n//                 }\n//                 return faq;\n//             })\n//         )\n//     }\n\n//     const findQuestionHandler = (e) => {\n//         /*1st approach\n//         const qsFound = questions.filter(faq => faq.question.toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase()))\n//         setFaqs(qsFound)*/\n//         setWantedQ(e.target.value)\n//     }\n//     /* 2nd approach\n//         const filteredQuestions = faqs.filter(faq =>faq.question.toLocaleLowerCase().includes(wantedQ.toLocaleLowerCase()))\n//     */\n\n//     //3rd approach\n//     useEffect(() => {\n//         setFilteredQs(\n//             faqs.filter(faq => faq.question.toLocaleLowerCase().includes(wantedQ.toLocaleLowerCase()))\n//         )\n//     }, [faqs, wantedQ])\n\n//     const tagsList = [...new Set(filteredQs.map(faq => [...faq.tags]).flat())];\n\n//     return (\n//         <div className='faq-page-container'>\n//             <header>the best faq page ever!</header>\n//             <div className='search-question-container'>\n//                 <input\n//                     name='search'\n//                     type='text'\n//                     value={wantedQ}\n//                     autoComplete = 'off'\n//                     placeholder='Search question'\n//                     onChange={findQuestionHandler}\n//                     autoFocus={true}\n//                 />\n//             </div>\n            \n//             <Tags list={tagsList} qs={filteredQs} setQs={setFilteredQs}/>\n\n//             <div className='faqs'>\n                \n//                 {/* 1st approach\n//                     {  faqs.length === 0 \n//                     ? <span className='no-matches'>no questions found.. ðŸ˜­</span> \n//                     : faqs.map((faq, index) => (\n//                         <React.Fragment key={index}>\n//                             <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n//                         </React.Fragment>\n//                      ))\n//                 } */}\n//                 {/*2nd approach\n//                     filteredQuestions.map((faq, index) => (\n//                         <React.Fragment key={index}>\n//                             <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n//                         </React.Fragment>\n//                     ))\n//                 */}\n//                 {\n//                     /*3rd approach using a second useEffect()*/\n//                     filteredQs.length === 0 \n//                     ? <span className='no-matches'>no questions found.. ðŸ˜­</span> \n//                     : filteredQs.map((faq, index) => (\n//                         <React.Fragment key={index}>\n//                             <Question faq={faq} index={index} onToggleQ={toggleQuestion}/>\n//                         </React.Fragment>\n//                     ))\n//                 }\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default FAQ;\n\nconst FAQ = () => {\n    const [ faqs, setFaqs] = useState(questions);\n    const [ wantedQ, setWantedQ ] = useState('');\n\n    \n    useEffect(() => {\n        if(wantedQ.length === 0){\n            setFaqs(questions)\n        }\n    },[wantedQ])\n    \n    const toggleQuestion = id => {\n        setFaqs(\n            faqs.map(faq => {\n                if(faq.id === id){\n                    faq.open = !faq.open\n                }else{\n                    faq.open = false\n                }\n                return faq;\n            })\n        )\n    }\n    \n    const findQuestionHandler = (e) => {\n        setWantedQ(e.target.value)\n    }\n    \n    const handleRemoveQs = tag => {\n        setFaqs(faqs.filter(faq => !faq.tags.includes(tag)));\n    }\n        \n    const filteredQs = faqs.filter(faq => faq.question.toLowerCase().includes(wantedQ.toLowerCase()))\n    const tagsList = [...new Set(filteredQs.map(faq => [...faq.tags]).flat())];\n    \n    // console.log(tagsList);\n    return (\n        <div className='faq-page-container'>\n            <header>the best faq page ever!</header>\n            <div className='search-question-container'>\n                <input\n                    name='search'\n                    type='text'\n                    value={wantedQ}\n                    autoComplete = 'off'\n                    placeholder='Search question'\n                    onChange={findQuestionHandler}\n                    autoFocus={true}\n                />\n            </div>\n            \n            <Tags list={tagsList} removeQ={handleRemoveQs}/>\n\n            <div className='faqs'>\n            \n                {   filteredQs.length === 0\n                    ? <span className='no-matches'>no questions found.. ðŸ˜­</span> \n                    : filteredQs\n                        .map((faq, index) => (\n                            <React.Fragment key={index}>\n                                <Question faq={faq} onToggleQ={toggleQuestion}/>\n                            </React.Fragment>\n                        ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default FAQ;","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport './todo-styles.css';\n\n\nconst List = (props) => {\n    return (\n        <div>\n            <ul>\n                {\n                    props.items.map((item, index) => (\n                        <li key={index} className={item.completed ? 'completed' : 'pending'}>\n                            {item.task}\n                            <div className='actions'>\n                                <span className={item.completed ? 'hide' : 'done'} onClick={() => props.markAsCompleted(item.id)}>\n                                    <i className='fa fa-check'/>\n                                </span>\n                                <span className='trash' onClick={() => props.removeTask(item.id)}>\n                                    <i className='fa fa-trash'/>\n                                </span>\n                            </div>\n                        </li>\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default List;","import React, { useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport \"./todo-styles.css\";\nimport List from './List';\n\nconst tasks = [\n    {\n      id: uuid(),\n      task: \"Pay the rent\",\n      completed: false\n    },\n    {\n      id: uuid(),\n      task: \"Go to the gym\",\n      completed: false\n    },\n    {\n      id: uuid(),\n      task: \"Do my homework\",\n      completed: false\n    }\n]\n\nconst Todo = () => {\n    const [ items, setItems ] = useState(tasks);\n    const [ task, setTask ] = useState('');\n\n    const handleOnChange = e => {\n        const { target: { value } } = e;\n        setTask(value)\n    }\n\n    const handleOnSubmit = e => {\n        e.preventDefault()\n        if(task.length !== 0){\n            setItems(items.concat({id: uuid(), task: task, completed: false}))\n            setTask('');\n        }\n    }\n\n    const handleMarkAsCompleted = id => {\n        /* works just for classes\n        const taskToChange = items.find(item => item.id === id);\n        taskToChange.completed = true;\n        setItems(Object.assign(items, taskToChange))*/\n        setItems(items.map(item => item.id === id ? {...item, completed: true} : item));\n    }\n\n    const handleRemoveTask = id => {\n        const filteredTasks = items.filter(task => task.id !== id)\n        setItems(filteredTasks);\n    }\n\n    return(\n        <div className='Todo'>\n            <h1>Tasks manager</h1>\n            <form autoComplete='off' onSubmit={handleOnSubmit}>\n                <input\n                    value={task}\n                    placeholder='Enter new task'\n                    onChange={handleOnChange}\n                />\n            </form>\n            <List items={items} markAsCompleted={handleMarkAsCompleted} removeTask={handleRemoveTask}/>\n        </div>\n    )\n\n}\n\nexport default Todo;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\nimport Home from './components/home/Home';\nimport FAQ from './components/faq/FAQ';\nimport Todo from './components/basicTodo/Todo';\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    name: \"Home\",\n    component: <Home/>\n  },\n  {\n    path: \"/accordion\",\n    name: \"FAQ page\",\n    component: <FAQ/>\n  },\n  {\n    path: \"/basic-todo\",\n    name: \"Basic Todo\",\n    component: <Todo/>\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className='inner-container'>\n          <section className=\"sidebar\">\n            <h1>My Apps ðŸ’ª</h1>\n            <ul>\n              {\n                routes.map((route, index) => (\n                  <li key={index}>\n                    <Link to={route.path}>{route.name}</Link>\n                  </li>\n                ))\n              }\n            </ul>\n          </section>\n          <section className='content'>\n            <Switch>\n                {\n                  routes.map((route, index) => (\n                    <Route exact={route.exact} key={index} path={route.path} children={route.component}/>\n                  ))\n                }\n              </Switch>\n          </section>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}